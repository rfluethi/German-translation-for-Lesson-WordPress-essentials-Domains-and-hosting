name: Create Release with LFS Files (Fixed)

on:
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  create-release-zips:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      # Critical: Use a different approach - download LFS files via GitHub API
      - name: Setup Git LFS and download via API
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "=== Setting up Git LFS ==="
          
          # Install Git LFS
          curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
          sudo apt-get install git-lfs
          git lfs install
          
          echo "Git LFS version: $(git lfs version)"
          
          # Get repository information
          REPO_OWNER="${GITHUB_REPOSITORY%%/*}"
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          
          echo "Repository: $REPO_OWNER/$REPO_NAME"
          
          # Download LFS files using GitHub's LFS API
          echo "=== Downloading LFS files via GitHub API ==="
          
          # Get all LFS objects
          git lfs ls-files --long | while IFS= read -r line; do
            if [[ $line == *" * "* ]]; then
              # Extract OID and filename
              oid=$(echo "$line" | awk '{print $1}')
              filename=$(echo "$line" | awk '{print $3}')
              
              echo "Downloading LFS file: $filename (OID: $oid)"
              
              # Create directory if needed
              mkdir -p "$(dirname "$filename")"
              
              # Download via GitHub LFS API
              curl -L \
                -H "Accept: application/vnd.git-lfs+json" \
                -H "Authorization: token $GITHUB_TOKEN" \
                "https://github.com/$REPO_OWNER/$REPO_NAME.git/info/lfs/objects/batch" \
                -d "{\"operation\":\"download\",\"transfers\":[\"basic\"],\"objects\":[{\"oid\":\"$oid\",\"size\":1}]}" \
                -s | jq -r '.objects[0].actions.download.href' | xargs -I {} curl -L {} -o "$filename"
              
              if [ -f "$filename" ]; then
                size=$(stat -c%s "$filename" 2>/dev/null || stat -f%z "$filename")
                echo "Downloaded: $filename ($size bytes)"
              else
                echo "Failed to download: $filename"
              fi
            fi
          done

      # Alternative: Use git archive approach for LFS files
      - name: Alternative LFS download method
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "=== Alternative method: Using git archive ==="
          
          # This approach uses GitHub's archive API which includes LFS files
          curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/tarball/$GITHUB_REF_NAME" \
            -o /tmp/repo-with-lfs.tar.gz
          
          # Extract to temporary directory
          mkdir -p /tmp/repo-extract
          tar -xzf /tmp/repo-with-lfs.tar.gz -C /tmp/repo-extract --strip-components=1
          
          # Copy LFS files back
          if [ -f "/tmp/repo-extract/media/video/video-v-0-02-00.mp4" ]; then
            cp -r /tmp/repo-extract/media/* media/ 2>/dev/null || true
            cp -r /tmp/repo-extract/src/* src/ 2>/dev/null || true
            echo "Copied files from archive"
          fi

      # Final verification
      - name: Verify LFS files are downloaded
        run: |
          echo "=== Final verification ==="
          
          # Check critical files
          critical_files=(
            "media/video/video-v-0-02-00.mp4"
          )
          
          for file in "${critical_files[@]}"; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file")
              echo "$file: $size bytes"
              
              if [ "$size" -lt 10000000 ]; then  # Less than 10MB
                echo "ERROR: $file is too small ($size bytes) - likely still a pointer"
                echo "File content:"
                head -3 "$file"
                
                # Last resort: try to find the actual file in .git/lfs
                if [ -d ".git/lfs/objects" ]; then
                  echo "Searching in .git/lfs/objects..."
                  find .git/lfs/objects -type f -size +10M | head -1 | xargs -I {} cp {} "$file" || true
                fi
                
                # Check again
                new_size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file")
                if [ "$new_size" -lt 10000000 ]; then
                  echo "CRITICAL: Could not fix $file"
                  exit 1
                fi
              else
                echo "SUCCESS: $file downloaded correctly"
              fi
            else
              echo "ERROR: $file not found"
              exit 1
            fi
          done

      # Create ZIP files
      - name: Create ZIP files
        run: |
          mkdir -p zip
          
          echo "=== Creating ZIP files ==="
          
          # Docs ZIP
          if [ -d "docs" ] && [ "$(ls -A docs)" ]; then
            zip -r zip/tutorial-docs.zip docs
            echo "Docs ZIP: $(du -h zip/tutorial-docs.zip | cut -f1)"
          fi
          
          # Assets ZIP
          if [ -d "src" ] && [ "$(ls -A src)" ]; then
            zip -r zip/tutorial-assets.zip src
            echo "Assets ZIP: $(du -h zip/tutorial-assets.zip | cut -f1)"
          fi
          
          # Videos ZIP - this is critical
          if [ -d "media" ] && [ "$(ls -A media)" ]; then
            # Final check before zipping
            if [ -f "media/video/video-v-0-02-00.mp4" ]; then
              size=$(stat -c%s "media/video/video-v-0-02-00.mp4")
              if [ "$size" -lt 10000000 ]; then
                echo "CRITICAL ERROR: Video file too small before zipping: $size bytes"
                exit 1
              fi
            fi
            
            zip -r zip/tutorial-videos.zip media
            video_zip_size=$(stat -c%s "zip/tutorial-videos.zip")
            echo "Videos ZIP: $(du -h zip/tutorial-videos.zip | cut -f1) ($video_zip_size bytes)"
            
            # Verify ZIP is not too small
            if [ "$video_zip_size" -lt 1000000 ]; then  # Less than 1MB
              echo "CRITICAL ERROR: Videos ZIP too small: $video_zip_size bytes"
              exit 1
            fi
          fi
          
          # Complete ZIP
          zip -r zip/tutorial-complete.zip . -x '*.git*' 'zip/*' '.DS_Store'
          echo "Complete ZIP: $(du -h zip/tutorial-complete.zip | cut -f1)"

      # Show detailed ZIP information
      - name: Analyze ZIP contents
        run: |
          echo "=== ZIP Analysis ==="
          for zip_file in zip/*.zip; do
            echo "=== $(basename $zip_file) ==="
            echo "Size: $(du -h $zip_file | cut -f1)"
            echo "Byte size: $(stat -c%s $zip_file)"
            echo "Video files in ZIP:"
            unzip -l "$zip_file" | grep -E '\.(mp4|avi|mov)' || echo "No video files found"
            echo "Large files (>1MB) in ZIP:"
            unzip -l "$zip_file" | awk '$1 > 1048576 {print $1, $4}' | head -5
            echo ""
          done

      # Upload to release
      - name: Upload to Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: zip/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload as artifacts
      - name: Upload as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-zips-fixed
          path: zip/*.zip
