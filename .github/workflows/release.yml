name: Create Release with LFS Files

on:
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  create-release-zips:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # LFS disabled as per .gitattributes configuration
          
      # Git LFS is disabled - verify large files are present
      - name: Verify large files are present
        run: |
          echo "=== Verifying large files without LFS ==="
          
          # Check critical files
          critical_files=(
            "media/video/video-v-0-02-00.mp4"
            "media/video/video-v-0-02-01.mp4"
          )
          
          for file in "${critical_files[@]}"; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file")
              echo "$file: $size bytes"
              
              if [ "$size" -lt 1000000 ]; then  # Less than 1MB
                echo "ERROR: $file is too small ($size bytes)"
                echo "File content:"
                head -3 "$file"
                exit 1
              else
                echo "SUCCESS: $file present and correct size"
              fi
            else
              echo "ERROR: $file not found"
              exit 1
            fi
          done

      # Create ZIP files
      - name: Create ZIP files
        run: |
          mkdir -p zip
          
          echo "=== Creating ZIP files ==="
          
          # Docs ZIP
          if [ -d "docs" ] && [ "$(ls -A docs)" ]; then
            zip -r zip/tutorial-docs.zip docs
            echo "Docs ZIP: $(du -h zip/tutorial-docs.zip | cut -f1)"
          fi
          
          # Assets ZIP
          if [ -d "src" ] && [ "$(ls -A src)" ]; then
            zip -r zip/tutorial-assets.zip src
            echo "Assets ZIP: $(du -h zip/tutorial-assets.zip | cut -f1)"
          fi
          
          # Videos ZIP - this is critical
          if [ -d "media" ] && [ "$(ls -A media)" ]; then
            # Final check before zipping
            if [ -f "media/video/video-v-0-02-00.mp4" ]; then
              size=$(stat -c%s "media/video/video-v-0-02-00.mp4" 2>/dev/null || stat -f%z "media/video/video-v-0-02-00.mp4")
              if [ "$size" -lt 1000000 ]; then  # Less than 1MB (adjusted for non-LFS)
                echo "CRITICAL ERROR: Video file too small before zipping: $size bytes"
                exit 1
              fi
            fi
            
            zip -r zip/tutorial-videos.zip media
            video_zip_size=$(stat -c%s "zip/tutorial-videos.zip" 2>/dev/null || stat -f%z "zip/tutorial-videos.zip")
            echo "Videos ZIP: $(du -h zip/tutorial-videos.zip | cut -f1) ($video_zip_size bytes)"
            
            # Verify ZIP is not too small (adjusted for non-LFS)
            if [ "$video_zip_size" -lt 100000 ]; then  # Less than 100KB
              echo "CRITICAL ERROR: Videos ZIP too small: $video_zip_size bytes"
              exit 1
            fi
          fi
          
          # Complete ZIP
          zip -r zip/tutorial-complete.zip . -x '*.git*' 'zip/*' '.DS_Store'
          echo "Complete ZIP: $(du -h zip/tutorial-complete.zip | cut -f1)"

      # Show detailed ZIP information
      - name: Analyze ZIP contents
        run: |
          echo "=== ZIP Analysis ==="
          for zip_file in zip/*.zip; do
            echo "=== $(basename $zip_file) ==="
            echo "Size: $(du -h $zip_file | cut -f1)"
            echo "Byte size: $(stat -c%s $zip_file 2>/dev/null || stat -f%z $zip_file)"
            echo "Video files in ZIP:"
            unzip -l "$zip_file" | grep -E '\.(mp4|avi|mov)' || echo "No video files found"
            echo "Large files (>1MB) in ZIP:"
            unzip -l "$zip_file" | awk '$1 > 1048576 {print $1, $4}' | head -5
            echo ""
          done

      # Upload to release
      - name: Upload to Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: zip/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload as artifacts
      - name: Upload as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-zips-fixed
          path: zip/*.zip
